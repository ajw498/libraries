<?xml version='1.0'?> <!-- -*- text -*- -->

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [

<!ENTITY fdl SYSTEM "fdl.sgml">

<!-- date/version stamp files created as release tarball is rolled -->
<!ENTITY date SYSTEM "date.xml">
<!ENTITY version SYSTEM "version.xml">

<!ENTITY neon "neon">

<!-- a useful entity for writing reference examples -->
<!ENTITY egsess "ne_session *sess = ne_session_create(...);">

<!ENTITY null "<literal>NULL</literal>">

<!ENTITY nul "<literal>NUL</literal>">

<!ENTITY refneon SYSTEM "ref/neon.xml">

<!ENTITY refsess SYSTEM "ref/sess.xml">
<!ENTITY referr SYSTEM "ref/err.xml">
<!ENTITY refopts SYSTEM "ref/opts.xml">
<!ENTITY refsslvfy SYSTEM "ref/sslvfy.xml">
<!ENTITY refsslcert SYSTEM "ref/sslcert.xml">
<!ENTITY refssldname SYSTEM "ref/ssldname.xml">
<!ENTITY refsslca SYSTEM "ref/sslca.xml">
<!ENTITY refreq SYSTEM "ref/req.xml">
<!ENTITY refreqhdr SYSTEM "ref/reqhdr.xml">
<!ENTITY refstatus SYSTEM "ref/status.xml">
<!ENTITY refgetst SYSTEM "ref/getst.xml">
<!ENTITY refreqbody SYSTEM "ref/reqbody.xml">
<!ENTITY refauth SYSTEM "ref/auth.xml">
<!ENTITY refalloc SYSTEM "ref/alloc.xml">
<!ENTITY refbuf SYSTEM "ref/buf.xml">
<!ENTITY refbufcr SYSTEM "ref/bufcr.xml">
<!ENTITY refbufapp SYSTEM "ref/bufapp.xml">
<!ENTITY refbufdest SYSTEM "ref/bufdest.xml">
<!ENTITY refbufutil SYSTEM "ref/bufutil.xml">
<!ENTITY reftok SYSTEM "ref/tok.xml">
<!ENTITY refshave SYSTEM "ref/shave.xml">
<!ENTITY refvers SYSTEM "ref/vers.xml">

]>

<book>
  <bookinfo>
    <title>neon HTTP/WebDAV client library</title>
    <author>
      <firstname>Joe</firstname><surname>Orton</surname>
      <affiliation>
	<address><email>neon@webdav.org</email></address>
      </affiliation>
    </author>
    <copyright><year>2001-2002</year><holder>Joe Orton</holder></copyright>

    <legalnotice>
      <para>Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.1
      or any later version published by the Free Software Foundation;
      with no Invariant Sections, with no Front-Cover Texts, 
      and with no Back-Cover Texts.
      A copy of the license is included in the section entitled "GNU
      Free Documentation License".</para>
    </legalnotice>

  </bookinfo>
  
  <chapter id="intro">
    <title>Introduction</title>

    <para>This chapter provides an introduction to neon, giving an
overview of the range of features offered, and some general guidelines
for using the neon API.</para>
    
    <para>neon aims to provide a modern, flexible, and simple API
in the C programming language for implementing HTTP and WebDAV
support.  The WebDAV functionality is entirely separate from the basic
HTTP functionality; neon can be used simply as an HTTP client library,
ignoring the WebDAV support if desired.</para>

    <sect1>
      <title>Feature list</title>

      <para>The major features of the neon library are as follows:</para>

      <itemizedlist>

	<listitem><para>A high-level interface to common HTTP and WebDAV
methods.  This allows you to easily dispatch a GET or a MKCOL request
against a resource with a single function call.</para></listitem>

	<listitem><para>A low-level interface for HTTP request
handling; allowing you to implement requests using arbitrary methods
and request headers, capture arbitrary response headers, and so
on.</para></listitem>

	<listitem><para>Persistent connection support; neon groups a
set of requests to a server into a "session"; requests within that
session can use a persistent (also known as "keep-alive")
connection.</para></listitem>

	<listitem><para>Modern HTTP authentication support: a complete
implementation of the new authentication standard, RFC2617,
supporting the Digest (MD5) and Basic schemes, including integrity
checking.  Credentials are supplied by an application-defined
callback.</para></listitem>

	<listitem><para>Proxy server support; a session can be set to
use a proxy server.  Authentication is supported for the Proxy as well
as the origin server.</para></listitem>

	<listitem><para>Complete SSL support; a simple interface for
enabling SSL, hiding the complexity of using an SSL library directly.
Client certificate support, callback-based server certificate
verification, along with functions to load trusted CA
certificates.</para></listitem>

<!--
	<listitem><para>Compression support.</para></listitem>
-->

	<listitem><para>Generic XML parsing interface for handling XML
response bodies using SAX-like callbacks.  Both the expat and libxml
XML parser libraries are supported.</para></listitem>

	<listitem><para>WebDAV metadata support; set and remove
properties, query properties (PROPFIND); simple interface for
retrieving "flat" byte-string properties, more advanced support for
parsing "complex" XML structured properties.</para></listitem>

<!--
	<listitem><para>WebDAV locking support</para></listitem>
-->

	<listitem><para>Build environment support: the neon source
tree is designed so that it can be embedded in your application's
build tree; autoconf macros are supplied for integration.  To get
started quickly a <command>neon-config</command> script is included,
to easily determine how to compile and link against an installed copy
of neon</para></listitem>

	<listitem><para>Complete test suite: the neon test suite
comprises half as many lines of source code as the library itself,
including many tests for protocol compliance in network behaviour, and
that the library implementation meets the guarantees made by the
API.</para> </listitem>

<!-- 

	<listitem><para>Thorough documentation: neon documentation is
provided in HTML and man page formats (from a single DocBook XML
source)</para></listitem>

-->

      </itemizedlist>
	
    </sect1>

    <sect1>
      <title>How to use neon from your application</title>
      
      <para>The neon source package is designed to be easily
      incorporated into applications:</para>
      
      <itemizedlist>
	<listitem>
	  
	  <para>autoconf macros are distributed in the 'macros'
	  subdirectory of the neon distribution.  Use NEON_LIBRARY
	  from your configure.in to check for the presence of the
	  neon library installed on the system.  The macro adds an
	  '--with-neon=...'  argument to configure, which allows the
	  user to specify a location for the library (the standard
	  /usr and /usr/local directories are checked automatically
	  without having to be specified).</para></listitem>
	  
	  <listitem><para>The 'src' directory of the neon package can be
	  imported directly into your application, if you do not wish
	  to add an external dependency.  If you wish to bundle, use
	  the NEON_BUNDLED macro to configure neon in your application:
	  here, the neon sources are bundled in a directory called
	  'libneon':</para>
	  
	  <programlisting>NEON_BUNDLED(libneon, ...)</programlisting>
	  
	  <para>If your application supports builds where srcdir != builddir,
	  you should use the NEON_VPATH_BUNDLED macro like this:</para>
	  
	  <programlisting>NEON_VPATH_BUNDLED(${srcdir}/libneon, libneon, ...)</programlisting>
	  
	  <para>If you use this macro, a '--with-included-neon' option
	  will be added to the generated configure script.  This
	  allows the user to force the bundled neon to be used in the
	  application, rather than any neon library found on the
	  system. If you allow neon to be configured this way, you
	  must also configure an XML parser. Use the NEON_XML_PARSER
	  macro to do this.</para></listitem>
	  
	  <listitem><para>The final argument to the _BUNDLED macros is a
	  set of actions which are executed if the bundled build *is*
	  chosen (rather than an external neon which might have been
	  found on the user's system).  In here, use either the
	  NEON_LIBTOOL_BUILD or NEON_NORMAL_BUILD macro to set up the
	  neon Makefile appropriately: including adding the neon source
	  directory to the recursive make.</para></listitem>
	  
	</itemizedlist>
	
	<para>A full fragment might be:</para>
	
<programlisting>NEON_BUNDLED(libneon, [
  NEON_NORMAL_BUILD
  NEON_XML_PARSER
  SUBDIRS="libneon $SUBDIRS"
])</programlisting>
	
	<para>This means the bundled neon source directory (called 'libneon')
	is used if no neon is found on the system, and the standard XML
	parser search is used.</para>
	
      </sect1>
      
      <sect1>
	<title>neon API guidelines</title> 
	
	<para>neon reserves the namespace <literal>ne_*</literal>: an
	application which uses neon may not use symbols within this
	namespace.</para>
	
      </sect1>
      
      <sect1 id="compliance">
	<title>Protocol compliance</title>
	
	<para>neon is intended to be compliant with all relevant IETF and W3C
	standards.</para>
	
	<sect2><title>RFC2518</title>
	
	<para>neon is deliberately not compliant with section 23.4.2, and
	treats property names as a (namespace-URI, name) pair. This is
	<ulink url="http://lists.w3.org/Archives/Public/w3c-dist-auth/1999OctDec/0343.html">generally
	considered</ulink> to be the correct behaviour by the WebDAV
	WG and is likely to change in a future revision of the spec.</para>
	
      </sect2>
      
      <sect2>
	<title>RFC2616</title>
	
	<para>The redirect interface is deliberately not compliant with
	section 10.3, and will automatically follow redirects for the
	<literal>PROPFIND</literal> and <literal>OPTIONS</literal>
	methods as well as <literal>GET</literal> and
	<literal>HEAD</literal>.  This behaviour is approved by the 
	<ulink url="http://purl.org/NET/http-errata">HTTP errata</ulink>
	document.</para>

      </sect2>
      
    </sect1>
    
  </chapter>
  
  <chapter>
    <title>The neon API for the C language</title>
    
    <sect1 id="session">
      <title>Sessions</title>
      
      <para>An HTTP session is created using the
      <citerefentry><refentrytitle>ne_session_create</refentrytitle></citerefentry>
      function</para>
    </sect1>
    
    <sect1 id="lowlevel">
      <title>Low-level request interface</title>
      <para>ne_request.h interface</para>
    </sect1>
    
    <sect1 id="basic">
      <title>Basic HTTP and WebDAV methods</title>
      <para>ne_basic.h</para>
    </sect1>
    
    <sect1 id="auth">
      <title>HTTP authentication</title>

      <para>Authentication in HTTP is based on the
"challenge-response" principle: the client will not provide
authentication credentials to the server until challenged to do so.
After being challenged, the HTTP request can be re-sent with an extra
header presenting the authentication credentials.  For this reason,
authentication is implemented in neon using callbacks: when an
authentication challenge is received by the client, a callback
function is invoked which must supply the username and password
required to authenticate the user. In an interactive application, this
callback will typically be implemented using some form of
username/password prompt.</para>

      <para>Two types of authentication are supported: server
authentication (via the <function>ne_set_server_auth</function>
function), and proxy authentication (via the
<function>ne_set_proxy_auth</function> function), which act
independently of each other.</para>
      
    </sect1>

    <sect1 id="ssl">
      <title>Using SSL/TLS</title>
      <para>neon can be configured to support an SSL library		
      </para>
    </sect1>

    <sect1 id="xml">
      <title>Parsing XML</title> <para>ne_xml.h functions</para>
    </sect1>
    
    <sect1 id="props">
      <title>WebDAV properties</title>
      <para>ne_props.h functions</para>
    </sect1>
    
    <sect1 id="locking">
      <title>WebDAV locking</title>
      <para>ne_locks.h functions</para>
    </sect1>

    <sect1 id="utils">
      <title>Utility routines</title>

      <para>neon offers some abstract data types and utility functions
for performing string manipulation, date and time handling, and a
convenient interface for adding debugging output to your
application.</para>

      <sect2 id="string">
	<title>String handling</title>
	
	<para>The <literal>ne_string.h</literal> offers a string buffer
data type, <type>ne_buffer *</type>, a transparent type storing a

	
</para>
      </sect2>
      <sect2 id="datetime">
	<title>Date/time manipulation</title>
	<para>ne_dates.h functions</para>
      </sect2>
    </sect1>

  </chapter>
  
  <reference id="ref">

    <!-- these are used in the man page header/footers -->
    <referenceinfo>
      <title>neon API reference</title>
      <date>&date;</date>
      <productname>neon &version;</productname>
    </referenceinfo>
    
    <title>neon API reference</title>

    &refneon; <!-- neon -->
    &refreqhdr; <!-- ne_add_request_header -->
    &refbuf; <!-- ne_buffer -->
    &refbufapp; <!-- ne_buffer_append -->
    &refbufutil; <!-- ne_buffer_clear -->
    &refbufcr; <!-- ne_buffer_create -->
    &refbufdest; <!-- ne_buffer_destroy -->
    &referr; <!-- ne_get_error -->
    &refgetst; <!-- ne_get_status -->
    &refalloc; <!-- ne_malloc -->
    &refreq; <!-- ne_request_create -->
    &refsess; <!-- ne_session_create -->
    &refopts; <!-- ne_set_useragent -->
    &refreqbody; <!-- ne_set_request_body_buffer -->
    &refauth; <!-- ne_set_server_auth -->
    &refshave; <!-- ne_shave -->
    &refsslcert; <!-- ne_ssl_certificate -->
    &refssldname; <!-- ne_ssl_dname -->
    &refsslca; <!-- ne_ssl_load_ca -->
    &refsslvfy; <!-- ne_ssl_set_verify -->
    &refstatus; <!-- ne_status -->
    &reftok; <!-- ne_token -->
    &refvers; <!-- ne_version_match -->

    <!-- REFEND -->
    <!-- ******************************************************************* -->
    
    <refentry id="refconfig">

      <refentryinfo><title>neon</title></refentryinfo>

      <refmeta>
	<refentrytitle>neon-config</refentrytitle>
	<manvolnum>1</manvolnum>
      </refmeta>

      <refnamediv>
	<refname id="neon-config">neon-config</refname>

	<refpurpose>script providing information about installed copy
	of neon library</refpurpose>
      </refnamediv>

      <refsynopsisdiv>

	<cmdsynopsis>
	  <command>neon-config</command>
	  <arg choice="opt"><option>--prefix</option></arg><sbr/>
	  <group>
	    <arg><option>--cflags</option></arg>
	    <arg><option>--libs</option></arg>
	    <arg><option>--support</option> <replaceable>feature</replaceable></arg>
	    <arg><option>--help</option></arg>
	    <arg><option>--version</option></arg>
	  </group>
	</cmdsynopsis>

      </refsynopsisdiv>

      <refsect1>
	<title>Description</title>

	<para>The <command>neon-config</command> script provides
information about an installed copy of the neon library.  The
<option>--cflags</option> and <option>--libs</option> options instruct
how to compile and link an application against the library; the
<option>--version</option> and <option>--support</option> options can
help determine whether the library meets the applications
requirements.</para>

      </refsect1>

      <refsect1>
	<title>Options</title>

	<variablelist>

	  <varlistentry>
	    <term><option>--cflags</option></term>
	    <listitem><para>Print the flags which should be passed to
the C compiler when compiling object files, when the object files use
neon header files.</para></listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><option>--libs</option></term>
	    <listitem><para>Print the flags which should be passed to
the linker when linking an application which uses the neon
library</para></listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><option>--version</option></term>
	    <listitem><para>Print the version of the library</para></listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><option>--prefix</option> <replaceable>dir</replaceable></term>
	    <listitem><para>If <replaceable>dir</replaceable> is given; relocate output of
<option>--cflags</option> and <option>--libs</option> as if neon was
installed in given prefix directory.  Otherwise, print the
installation prefix of the library.</para></listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><option>--support</option> <replaceable>feature</replaceable></term>
	    <listitem><para>The script exits with success if
<replaceable>feature</replaceable> is supported by the
library.</para></listitem>
          </varlistentry>

	  <varlistentry>
	    <term><option>--help</option></term>
	    <listitem><para>Print help message; includes list of known
	    features and whether they are supported or not.</para></listitem>
	  </varlistentry>

	</variablelist>

      </refsect1>

      <refsect1>
	<title>Example</title>

	<para>Below is a Makefile fragment which could be used to
build an application against an installed neon library, when the
<command>neon-config</command> script can be found in
<envar>$PATH</envar>.</para>

	<programlisting>CFLAGS = `neon-config --cflags`
LIBS = `neon-config --libs`
OBJECTS = myapp.o
TARGET = myapp

$(TARGET): $(OBJECTS)
	$(CC) $(LDFLAGS) -o $(TARGET) $(OBJECTS) $(LIBS)

myapp.o: myapp.c
	$(CC) $(CFLAGS) -c myapp.c -o myapp.o</programlisting>

       </refsect1>

    </refentry>

  </reference>

&fdl;
  
</book>
